<!-- Styling for size chart -->
<style>
  .limit-height {
  max-height: 0;
  }

  div.best-fit-size-chart {
    width: auto;
  }

  div.best-fit-size-chart button.scr-open-size-chart {
    padding: unset;
    margin: unset;
    font-size: 14px;
    font-weight: 500;
    color: black;
  }

  div.best-fit-size-chart button.scr-open-size-chart.ruler3::before {
    display: none;
  }
</style>

<div id="product-info" class="relative flex flex-col lg:pt-2 lg:flex-row max-w-screen-2xl mx-auto">
  <div class="flex w-screen lg:w-7/12 relative">
    <div class="hidden lg:flex flex-col mr-6 gap-3 sticky top-[var(--header-offset)] h-[calc(100vh-var(--header-offset))] overflow-y-scroll scrollbar-hidden scroll-smooth">
      <a v-for="(media, index) in productImages" :href="'#product-image-' + index"
        class="scroll-mt-[var(--header-offset)]">
        <img
          :src="imageSize(media.src, '256x')"
          :alt="media.alt"
          class="w-40"
          loading="lazy" />
      </a>
    </div>

    <div class="hidden lg:flex flex-col sticky top-[var(--header-offset)] w-full h-[calc(100vh-var(--header-offset))] gap-5 overflow-scroll scrollbar-hidden scroll-smooth">
      <picture
        v-for="(media, index) in productImages"
        :id="'product-image-' + index"
        class="">
        <source media="(min-width: 2560px)" :srcset="imageSize(media.src, '3840x')">
        <source media="(min-width: 1280px)" :srcset="imageSize(media.src, '2560x')">
        <source media="(min-width: 640px)" :srcset="imageSize(media.src, '1280x')">
        <img class="w-full" :src="imageSize(media.src, '2560x')" :alt="media.alt">
      </picture>
    </div>

    <div ref="carousel" class="product-carousel w-full overflow-hidden lg:hidden">
      <div class="swiper-wrapper">
        <div class="swiper-slide" v-for="(media, index) in productImages">
          <picture>
            <source media="(min-width: 640px)" :srcset="imageSize(media.src, '1280x')">
            <source media="(max-width: 639px)" :srcset="imageSize(media.src, '640x')">
            <img class="w-full aspect-square object-cover" :src="imageSize(media.src, '1280x')" :alt="media.alt">
          </picture>
        </div>
      </div>
    </div>
  </div>
  <div class="px-5 pt-5 flex flex-col max-w-xl mx-auto sticky top-[var(--header-offset)] lg:max-w-none lg:w-5/12 lg:pt-0 2xl:pl-7 2xl:pr-0">
    <!-- Breadcrumbs start -->
    {% for c in product.collections %}
      {% case c.handle %}
        {% when 'shoes' %}
          {% assign collection_handle = 'shoes' %}
      {% endcase %}
    {% endfor %}
    <nav class="uppercase text-neutral-400 text-xs lg:text-sm">
      <a href="/">HOME</a>
      <span class="mx-1">/</span>
      {% if collection_handle %}
        <a class="" href="/collections/{{ collection_handle }}">
          {{ collection_handle }}
        </a>
        <span class="mx-1">/</span>
      {% endif %}
      <span class="text-black">{{ product.title }}</span>
    </nav>
    <!-- Breadcrumbs end -->


    {% if product.options_by_name['color'] %}
      <h2 class="mt-2 uppercase text-neutral-700 font-black text-2xl lg:text-3xl">{ this.options['Color'] }</h2>
      <h1 class="mt-1 uppercase font-medium lg:text-lg">{{ product.title }}</h1>
    {% else %}
      <h1 class="mt-2 uppercase text-neutral-700 font-black text-2xl lg:text-3xl">{{ product.title }}</h1>
    {% endif %}

    <!-- Loox Reviews -->
    <a href="#looxReviews"><div class="loox-rating" data-id="{{ product.id }}" data-rating="{{ product.metafields.loox.avg_rating }}" data-raters="{{ product.metafields.loox.num_reviews }}"></div></a>

    {% if settings.enable_product_reviews and settings.reviews_layout == 'full' %}
      {% if isModal %}
        {%- assign review_link = product.url | within: collection | append: '#Reviews-' | append: product.id -%}
      {% else %}
        {%- assign review_link = '#Reviews-' | append: product.id -%}
      {% endif %}
      <a href="{{ review_link }}" class="product-single__review-link">
        <span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>
      </a>
    {% endif %}

    {% if product.metafields.loox.num_reviews %}
    <script id="looxSchemaJson" type="application/ld+json">
    {
        "@context": "http://schema.org",
        "@type": "Product",
        "@id": {{ canonical_url | json }},
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": "{{ product.metafields.loox.avg_rating }}",
            "reviewCount": "{{ product.metafields.loox.num_reviews }}"
        },
        "name": {{ product.title | json }}
    }
    </script>
    {% endif %}

    {%- comment -%} <div id="looxReviews" data-product-id="{{product.id}}" class="loox-reviews-default">{{ product.metafields.loox.reviews }}</div> {%- endcomment -%}
    <!-- END Loox Reviews -->

    <span v-if="compareAtPrice > price" class="flex my-2 lg:text-lg">
        <span class="line-through decoration-downy-300 text-neutral-700">{ formatMoney(compareAtPrice) }</span>
        <span class="ml-2">{ formatMoney(price) }</span>
      <div id="Afterpay"></div>
    </span>
    <span v-else class="flex my-2 lg:text-lg">
        <span>{ formatMoney(price) }</span>
    </span>

    <div v-for="option in product.options" class="flex flex-col" :key="option.name">
      <div v-if="option.name.toLowerCase().includes('color') && colorImagesExist" class="mt-3 flex flex-wrap gap-1">
        <label v-for="(value, index) in option.values" :for="value" :key="value">
          <input
            type="radio"
            class="[&:checked_+_img]:border"
            v-model="options[option.name]"
            :name="option.name"
            :value="value"
            :id="value"
            hidden>
          <img
            class="rounded-full w-8 h-8 p-1 object-cover border-black cursor-pointer lg:h-11 lg:w-11"
            :src="imageSize(colorImages[value.toLowerCase()].src, '128x')"
            :alt="value">
        </label>
      </div>
      <div v-else-if="!option.name.toLowerCase().includes('title')" class="mt-5 flex flex-col">
        <span class="flex justify-between">
          <p class="font-medium uppercase">{ option.name }</p>
          <div class="best-fit-size-chart"></div>
        </span>
        <div class="relative mt-1">
          <select
            v-model="options[option.name]"
            class="w-full appearance-none py-3 px-4 bg-transparent border border-black lg:py-4 lg:px-5 cursor-pointer"
            :name="option.name"
            id=""
          >
            <option
              v-for="(value, index) in option.values"
              :checked="options[option.name] == value"
              :value="value"
              :key="value"
              >{ value }</option>
          </select>
          <svg class="w-8 h-8 p-2 absolute right-2 lg:right-4 top-1/2 -translate-y-1/2  bg-downy-300 rounded-full pointer-events-none" width="16" height="9" viewBox="0 0 16 9" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14.8894 0.188938L7.99929 6.90537L1.10916 0.188938C0.986054 0.0686954 0.820797 0.00137848 0.648713 0.00137848C0.476628 0.00137848 0.311372 0.0686954 0.188268 0.188938C0.128661 0.247341 0.0813067 0.317049 0.0489791 0.393983C0.0166514 0.470916 0 0.553527 0 0.636976C0 0.720426 0.0166514 0.803036 0.0489791 0.879969C0.0813067 0.956902 0.128661 1.02661 0.188268 1.08501L7.51817 8.23157C7.64689 8.35704 7.81954 8.42726 7.99929 8.42726C8.17905 8.42726 8.3517 8.35704 8.48042 8.23157L15.8103 1.08639C15.8703 1.02795 15.9181 0.958067 15.9506 0.880878C15.9832 0.80369 16 0.720758 16 0.636976C16 0.553195 15.9832 0.470262 15.9506 0.393074C15.9181 0.315885 15.8703 0.246006 15.8103 0.187559C15.6872 0.0673163 15.522 0 15.3499 0C15.1778 0 15.0125 0.0673163 14.8894 0.187559V0.188938Z" fill="white"/>
          </svg>
        </div>
      </div>
      <div v-else class="hidden">
        <select v-model="options[option.name]">
          <option
            v-for="(value, index) in option.values"
            :checked="options[option.name] == value"
            :value="value"
            >{ value }</option>
        </select>
      </div>
    </div>
    <div class="flex mt-4 mb-9">
      <div class="border border-black px-2 flex items-center w-1/3">
        <svg class="w-3 h-3 lg:h-4 lg:w-4 cursor-pointer" @click="updateQuantity(-1)" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M19 12.998H5v-2h14z"/></svg>
        <input
          class="w-8 flex-grow font-medium text-center lg:text-lg appearance-none"
          style="-moz-appearance: textfield;"
          type="number"
          name="quantity"
          v-model="quantity"
          aria-label="quantity" >
        <svg class="w-3 h-3 lg:h-4 lg:w-4 cursor-pointer" @click="updateQuantity(1)" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M19 12.998h-6v6h-2v-6H5v-2h6v-6h2v6h6z"/></svg>
      </div>
      <button
        id="AddToCart"
        @click="addToCart()"
        :disabled="!selectedVariant.available"
        class="bg-downy-300 disabled:bg-neutral-600 text-white font-black text-xl w-2/3 ml-3 py-4 transition-colors duration-300">
        <template v-if="selectedVariant.available">ADD TO CART</template>
        <template v-else>SOLD OUT</template>
      </button>
    </div>
      {% unless product.description == "" %}
        <div @click="toggleActiveAccordion('description')" class="flex items-center cursor-pointer py-6 border-t border-black">
          <span class="font-medium">DESCRIPTION</span>
          <svg :class="{ 'rotate-180': isActiveAccordion('description') }" class="transition-transform duration-300 ml-auto w-4 h-4 mr-2" width="16" height="9" viewBox="0 0 16 9" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14.8894 0.188938L7.99929 6.90537L1.10916 0.188938C0.986054 0.0686954 0.820797 0.00137848 0.648713 0.00137848C0.476628 0.00137848 0.311372 0.0686954 0.188268 0.188938C0.128661 0.247341 0.0813067 0.317049 0.0489791 0.393983C0.0166514 0.470916 0 0.553527 0 0.636976C0 0.720426 0.0166514 0.803036 0.0489791 0.879969C0.0813067 0.956902 0.128661 1.02661 0.188268 1.08501L7.51817 8.23157C7.64689 8.35704 7.81954 8.42726 7.99929 8.42726C8.17905 8.42726 8.3517 8.35704 8.48042 8.23157L15.8103 1.08639C15.8703 1.02795 15.9181 0.958067 15.9506 0.880878C15.9832 0.80369 16 0.720758 16 0.636976C16 0.553195 15.9832 0.470262 15.9506 0.393074C15.9181 0.315885 15.8703 0.246006 15.8103 0.187559C15.6872 0.0673163 15.522 0 15.3499 0C15.1778 0 15.0125 0.0673163 14.8894 0.187559V0.188938Z" fill="black"/>
          </svg>
        </div>
        <div
          class="defaultMaxHeight overflow-hidden transition-all duration-300"
          ref="descriptionEl">
          <div class="pt-1 pb-3">{{ product.description }}</div>
        </div>
      {% endunless %}
      {% unless section.settings.info_details_care == "" %}
        <div @click="toggleActiveAccordion('detailsCare')" class="flex items-center cursor-pointer py-6 border-t border-black">
          <span class="font-medium">DETAILS & CARE</span>
          <svg :class="{ 'rotate-180': isActiveAccordion('detailsCare') }" class="transition-transform duration-300 ml-auto w-4 h-4 mr-2" width="16" height="9" viewBox="0 0 16 9" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14.8894 0.188938L7.99929 6.90537L1.10916 0.188938C0.986054 0.0686954 0.820797 0.00137848 0.648713 0.00137848C0.476628 0.00137848 0.311372 0.0686954 0.188268 0.188938C0.128661 0.247341 0.0813067 0.317049 0.0489791 0.393983C0.0166514 0.470916 0 0.553527 0 0.636976C0 0.720426 0.0166514 0.803036 0.0489791 0.879969C0.0813067 0.956902 0.128661 1.02661 0.188268 1.08501L7.51817 8.23157C7.64689 8.35704 7.81954 8.42726 7.99929 8.42726C8.17905 8.42726 8.3517 8.35704 8.48042 8.23157L15.8103 1.08639C15.8703 1.02795 15.9181 0.958067 15.9506 0.880878C15.9832 0.80369 16 0.720758 16 0.636976C16 0.553195 15.9832 0.470262 15.9506 0.393074C15.9181 0.315885 15.8703 0.246006 15.8103 0.187559C15.6872 0.0673163 15.522 0 15.3499 0C15.1778 0 15.0125 0.0673163 14.8894 0.187559V0.188938Z" fill="black"/>
          </svg>
        </div>
        <div
          class="overflow-hidden transition-all duration-300"
          :style="{ 'max-height': getAccordionHeight('detailsCareEl', 'detailsCare') + 'px' }"
          ref="detailsCareEl">
          <div class="pt-1 pb-3">{{ section.settings.info_details_care }}</div>
        </div>
      {% endunless %}
      {% unless section.settings.info_custom_header == "" %}
        <div @click="toggleActiveAccordion('infoMade')" class="flex items-center cursor-pointer py-6 border-t border-black">
          <span class="font-medium">{{ section.settings.info_custom_header }}</span>
          <svg :class="{ 'rotate-180': isActiveAccordion('infoMade') }" class="transition-transform duration-300 ml-auto w-4 h-4 mr-2" width="16" height="9" viewBox="0 0 16 9" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M14.8894 0.188938L7.99929 6.90537L1.10916 0.188938C0.986054 0.0686954 0.820797 0.00137848 0.648713 0.00137848C0.476628 0.00137848 0.311372 0.0686954 0.188268 0.188938C0.128661 0.247341 0.0813067 0.317049 0.0489791 0.393983C0.0166514 0.470916 0 0.553527 0 0.636976C0 0.720426 0.0166514 0.803036 0.0489791 0.879969C0.0813067 0.956902 0.128661 1.02661 0.188268 1.08501L7.51817 8.23157C7.64689 8.35704 7.81954 8.42726 7.99929 8.42726C8.17905 8.42726 8.3517 8.35704 8.48042 8.23157L15.8103 1.08639C15.8703 1.02795 15.9181 0.958067 15.9506 0.880878C15.9832 0.80369 16 0.720758 16 0.636976C16 0.553195 15.9832 0.470262 15.9506 0.393074C15.9181 0.315885 15.8703 0.246006 15.8103 0.187559C15.6872 0.0673163 15.522 0 15.3499 0C15.1778 0 15.0125 0.0673163 14.8894 0.187559V0.188938Z" fill="black"/>
          </svg>
        </div>
        <div
          class="overflow-hidden transition-all duration-300"
          ref="infoMadeEl">
          <div class="pt-1 pb-3">{{ section.settings.info_custom_body }}</div>
        </div>
      {% endunless %}
  </div>
</div>

<!-- Product info sections -->
<div class="w-screen max-w-md mx-auto lg:max-w-screen-xl">
  {% unless section.settings.info_header_1 == "" %}
    <div class="flex flex-col-reverse lg:flex-row lg:items-center mt-16 lg:w-5/6 lg:mx-auto">
      <div class="flex flex-col items-center lg:items-start px-10 xl:px-24 text-center mt-10 lg:mt-0 lg:text-left lg:w-3/4">
        <span class="text-neutral-700 text-xl xl:text-2xl font-black uppercase">{{ section.settings.info_header_1 }}</span>
        <p class="mt-2 xl:mt-4">{{ section.settings.info_text_1 }}</p>
      </div>
      <picture>
        <source media="(min-width: 640px)" srcset="{{ section.settings.info_media_1 | image_url: width: 1280 }}">
        <source media="(max-width: 639px)" srcset="{{ section.settings.info_media_1 | image_url: width: 640 }}">
        <img class="w-full" src="{{ section.settings.info_media_1 | image_url: width: 1280 }}" alt="{{ section.settings.info_header_1 }}">
      </picture>
    </div>
  {% endunless %}
  {% unless section.settings.info_header_2 == "" %}
    <div class="flex flex-col-reverse lg:flex-row lg:items-center mt-16 lg:w-5/6 lg:mx-auto">
      <div class="flex flex-col items-center lg:items-start px-10 xl:px-24 text-center mt-10 lg:mt-0 lg:text-left lg:w-3/4">
        <span class="text-neutral-700 text-xl xl:text-2xl font-black uppercase">{{ section.settings.info_header_2 }}</span>
        <p class="mt-2 xl:mt-4">{{ section.settings.info_text_2 }}</p>
      </div>
      <picture>
        <source media="(min-width: 640px)" srcset="{{ section.settings.info_media_2 | image_url: width: 1280 }}">
        <source media="(max-width: 639px)" srcset="{{ section.settings.info_media_2 | image_url: width: 640 }}">
        <img class="w-full" src="{{ section.settings.info_media_2 | image_url: width: 1280 }}" alt="{{ section.settings.info_header_2 }}">
      </picture>
    </div>
  {% endunless %}
  {% unless section.settings.info_header_3 == "" %}
    <div class="flex flex-col-reverse lg:flex-row lg:items-center mt-16 lg:w-5/6 lg:mx-auto">
      <div class="flex flex-col items-center lg:items-start px-10 xl:px-24 text-center mt-10 lg:mt-0 lg:text-left lg:w-3/4">
        <span class="text-neutral-700 text-xl xl:text-2xl font-black uppercase">{{ section.settings.info_header_3 }}</span>
        <p class="mt-2 xl:mt-4">{{ section.settings.info_text_3 }}</p>
      </div>
      <picture>
        <source media="(min-width: 640px)" srcset="{{ section.settings.info_media_3 | image_url: width: 1280 }}">
        <source media="(max-width: 639px)" srcset="{{ section.settings.info_media_3 | image_url: width: 640 }}">
        <img class="w-full" src="{{ section.settings.info_media_3 | image_url: width: 1280 }}" alt="{{ section.settings.info_header_3 }}">
      </picture>
    </div>
  {% endunless %}
</div>

<!-- You may also like (flows to recommended section in product.template) -->
<div class="flex px-10">
  <span class="w-screen text-center mt-16 pt-16 border-t md:border-t-0 border-neutral-600 text-neutral-500 text-2xl md:text-3xl font-black">{{ section.settings.carousel_header }}</span>
</div>

<script>
  let ud_product = {{ product | json }}
  ud_product.options = {{ product.options_with_values | json }}

  const udPDP = Vue.createApp({
    delimiters: ['{', '}'],
    data() {
      return {
        product: ud_product,
        options: {},
        productImages: [],
        quantity: 1,
        activeAccordion: "",
        carousel: null
      }
    },
    computed: {
      colorImages() {
        let option = this.product.options.find(
          (x) => x.name == "Color"
        );

        if (option) {
          let colorImages = {};

          for (const color of option.values) {
            for (const image of this.product.media) {
              if (image.alt !== null && image.alt.toLowerCase() == color.toLowerCase()) {
                colorImages[color.toLowerCase()] = image;
              }
            }
          }
          return colorImages;
        } else {
          return {}
        }
      },
      colorImagesExist() {
        return Object.keys(this.colorImages).length > 0
      },
      price() {
        return this.selectedVariant.price;
      },
      compareAtPrice() {
        return this.selectedVariant.compare_at_price;
      },
      selectedVariant() {
        let variants = this.product.variants;
        let options = [];

        for (const [key, value] of Object.entries(this.options)) {
          options.push(value);
        }

        let variant = variants.find((variant) => {
          let variantOptions = variant.title.split(' / ');
          if(variantOptions.length == options.length && variantOptions.every(x => options.includes(x))) {
            return variant;
          }
        });

        return variant;
      }
    },
    watch: {
      selectedVariant: function () {
        this.updateProductImages();

        if (window.history.pushState) {
          let searchParams = new URLSearchParams(window.location.search);
          searchParams.set('variant', this.selectedVariant.id);

          let newPath = window.location.pathname + '?' + searchParams.toString() + window.location.hash;
          window.history.pushState(null, '', newPath);
        }
      },
    },
    methods: {
      toggleActiveAccordion(accordion) {
     // console.log(this.$refs.descriptionEl.style.background = "red");
     //:style="{ 'max-height': getAccordionHeight('descriptionEl', 'description') + 'px' }"

        this.$refs.descriptionEl.classList.toggle("limit-height");
        this.activeAccordion = this.activeAccordion == accordion ? "" : accordion;
      },
      isActiveAccordion(accordion) {
        return this.activeAccordion == accordion;
      },
      getAccordionHeight(el, accordion) {
        console.log(this.activeAccordion == accordion, this.$refs[el]?.scrollHeight)
        return this.activeAccordion == accordion ? this.$refs[el].scrollHeight + 16 : 0;
      },
      updateQuantity(amount) {
        let quantity = this.quantity + amount;
        this.quantity = quantity <= 0 ? 1 : quantity;
      },
      addToCart() {
        CartJS.addItem(this.selectedVariant.id, this.quantity, {}, {
          "success": function(data, textStatus, jqXHR) {
            setTimeout(function() {
              $(document).trigger("cart.requestComplete", [CartJS.cart]);
            }, 50);
            setTimeout(function() {
              $(document).trigger("cart.requestComplete", [CartJS.cart]);
            }, 150);
            setTimeout(function() {
              $(document).trigger("cart.requestComplete", [CartJS.cart]);
            }, 500);
            setTimeout(function() {
              $(document).trigger("cart.requestComplete", [CartJS.cart]);
            }, 1000);
            setTimeout(function() {
              $(document).trigger("cart.requestComplete", [CartJS.cart]);
            }, 3000);
          }
        });
        if (udCart && !udCart.isCartOpen) {
          udCart.openCart();
        }
      },
      formatMoney(value) {
        return Shopify.formatMoney(value);
      },
      updateProductImages() {
        let option = this.product.options.find(
          (x) => x.name == "Color"
        );
        let value, filteredImages;

        if (option) {
          value = this.selectedVariant["option" + option.position];
          filteredImages = this.product.media.filter((x) => {
            if (x.alt == null) return false;

            if (x.alt.toLowerCase().includes(value.toLowerCase()) &&
              x.alt.toLowerCase() !== value.toLowerCase()) return true;
          });
        }

        if (filteredImages && filteredImages.length > 0) {
          this.productImages = filteredImages;

          if (this.carousel) {
            this.carousel.slideTo(0, 0);
          }
        } else {
          this.productImages = this.product.media;
        }
      },
      imageSize(src, size) {
        return src.replace(/\.jpg|\.png|\.gif|\.jpeg/g, function (match) {
          return "_" + size + match;
        });
      },
    },
    created() {
      let searchParams = new URLSearchParams(window.location.search);
      let selectedVariant = this.product.variants.find(
        (x) => x.id == searchParams.get("variant")
      );

      if (selectedVariant !== undefined) {
        this.product.options.forEach((option, index) => {
          this.options[option.name] = selectedVariant.options[index];
        });
      } else {
        this.product.options.forEach((option, index) => {
          this.options[option.name] = option.values[0];
        });
      }
    },
    mounted() {
      this.carousel = new Swiper(this.$refs.carousel, {
        slidesPerView: 'auto',
        spaceBetween: 12,
      });

      this.$nextTick(() => {
        this.updateProductImages();
      });
    }
  }).mount('#product-info')
</script>

{% schema %}
{
  "name": "Product Template",
  "settings": [
    {
      "type": "text",
      "id": "carousel_header",
      "label": "Carousel Header Copy"
    },
    {
      "type": "richtext",
      "id": "info_details_care",
      "label": "Details & Care"
    },
    {
      "type": "text",
      "id": "info_custom_header",
      "label": "Custom Dropdown Header"
    },
    {
      "type": "richtext",
      "id": "info_custom_body",
      "label": "Custom Dropdown Body"
    },
    {
      "type": "text",
      "id": "info_header_1",
      "label": "Info Header 1"
    },
    {
      "type": "richtext",
      "id": "info_text_1",
      "label": "Info Text 1"
    },
    {
      "type": "image_picker",
      "id": "info_media_1",
      "label": "Info Media 1"
    },
    {
      "type": "text",
      "id": "info_header_2",
      "label": "Info Header 2"
    },
    {
      "type": "richtext",
      "id": "info_text_2",
      "label": "Info Text 2"
    },
    {
      "type": "image_picker",
      "id": "info_media_2",
      "label": "Info Media 2"
    },
    {
      "type": "text",
      "id": "info_header_3",
      "label": "Info Header 3"
    },
    {
      "type": "richtext",
      "id": "info_text_3",
      "label": "Info Text 3"
    },
    {
      "type": "image_picker",
      "id": "info_media_3",
      "label": "Info Media 3"
    }
  ]
}
{% endschema %}
